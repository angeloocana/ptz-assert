{"version":3,"sources":["../dist-esnext/index.js"],"names":["notOk","value","errorMsg","contains","list","item","indexOf","containsNTimes","nTimes","filter","x","length","notContains","containsFind","predicate","index","findIndex","notContainsFind","notEmptyString","text","notEmptyArray","emptyArray","ok","equal","deepEqual","notEqual","notDeepEqual","throws"],"mappings":";;;;;;;AAAA;;AACA,SAASA,KAAT,CAAeC,KAAf,EAAsBC,QAAtB,EAAgC;AAC5B,WAAO,gBAAG,CAACD,KAAJ,EAAWC,QAAX,CAAP;AACH;AACD,SAASC,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8BH,QAA9B,EAAwC;AACpC,WAAO,gBAAGE,KAAKE,OAAL,CAAaD,IAAb,KAAsB,CAAzB,EAA4BH,QAA5B,CAAP;AACH;AACD,SAASK,cAAT,CAAwBH,IAAxB,EAA8BC,IAA9B,EAAoCG,MAApC,EAA4CN,QAA5C,EAAsD;AAClD,WAAO,mBAAME,KAAKK,MAAL,CAAY;AAAA,eAAKC,MAAML,IAAX;AAAA,KAAZ,EAA6BM,MAAnC,EAA2CH,MAA3C,EAAmDN,QAAnD,CAAP;AACH;AACD,SAASU,WAAT,CAAqBR,IAArB,EAA2BC,IAA3B,EAAiCH,QAAjC,EAA2C;AACvC,QAAI,CAACE,IAAL,EACI;AACJ,WAAOJ,MAAMI,KAAKE,OAAL,CAAaD,IAAb,KAAsB,CAA5B,EAA+BH,QAA/B,CAAP;AACH;AACD,SAASW,YAAT,CAAsBT,IAAtB,EAA4BU,SAA5B,EAAuCZ,QAAvC,EAAiD;AAC7C,QAAMa,QAAQX,KAAKY,SAAL,CAAeF,SAAf,CAAd;AACA,WAAO,gBAAGC,SAAS,CAAZ,EAAeb,QAAf,CAAP;AACH;AACD,SAASe,eAAT,CAAyBb,IAAzB,EAA+BU,SAA/B,EAA0CZ,QAA1C,EAAoD;AAChD,QAAI,CAACE,IAAL,EACI;AACJ,QAAMW,QAAQX,KAAKY,SAAL,CAAeF,SAAf,CAAd;AACA,WAAOd,MAAMe,SAAS,CAAf,EAAkBb,QAAlB,CAAP;AACH;AACD,SAASgB,cAAT,CAAwBC,IAAxB,EAA8BjB,QAA9B,EAAwC;AACpC,QAAI,CAACiB,IAAL,EACI,MAAMjB,WAAWA,QAAX,GAAsB,4BAA5B;AACJ,QAAI,OAAOiB,IAAP,KAAgB,QAApB,EACI,MAAMjB,WAAWA,QAAX,GAAsB,oBAA5B;AACP;AACD,SAASkB,aAAT,CAAuBhB,IAAvB,EAA6BF,QAA7B,EAAuC;AACnC,QAAI,CAACE,IAAL,EACI,MAAMF,WAAWA,QAAX,GAAsB,2BAA5B;AACJ,QAAIE,KAAKO,MAAL,GAAc,CAAlB,EACI,MAAMT,WAAWA,QAAX,GAAsB,4BAA5B;AACP;AACD,SAASmB,UAAT,CAAoBjB,IAApB,EAA0BF,QAA1B,EAAoC;AAChC,QAAIE,QAAQA,KAAKO,MAAL,GAAc,CAA1B,EACI,MAAMT,WAAWA,QAAX,GAAsB,2BAA5B;AACP;QACQoB,E;QAAItB,K,GAAAA,K;QAAOuB,K;QAAOC,S;QAAWC,Q;QAAUC,Y;QAAcC,M;QAAQxB,Q,GAAAA,Q;QAAUU,Y,GAAAA,Y;QAAcN,c,GAAAA,c;QAAgBK,W,GAAAA,W;QAAaK,e,GAAAA,e;QAAiBC,c,GAAAA,c;QAAgBE,a,GAAAA,a;QAAeC,U,GAAAA,U;AAC3K","file":"index.js","sourcesContent":["import { deepEqual, equal, notDeepEqual, notEqual, ok, throws } from 'assert';\nfunction notOk(value, errorMsg) {\n    return ok(!value, errorMsg);\n}\nfunction contains(list, item, errorMsg) {\n    return ok(list.indexOf(item) >= 0, errorMsg);\n}\nfunction containsNTimes(list, item, nTimes, errorMsg) {\n    return equal(list.filter(x => x === item).length, nTimes, errorMsg);\n}\nfunction notContains(list, item, errorMsg) {\n    if (!list)\n        return;\n    return notOk(list.indexOf(item) >= 0, errorMsg);\n}\nfunction containsFind(list, predicate, errorMsg) {\n    const index = list.findIndex(predicate);\n    return ok(index >= 0, errorMsg);\n}\nfunction notContainsFind(list, predicate, errorMsg) {\n    if (!list)\n        return;\n    const index = list.findIndex(predicate);\n    return notOk(index >= 0, errorMsg);\n}\nfunction notEmptyString(text, errorMsg) {\n    if (!text)\n        throw errorMsg ? errorMsg : 'ERROR_NULL_REQUIRED_STRING';\n    if (typeof text !== 'string')\n        throw errorMsg ? errorMsg : 'ERROR_NOT_A_STRING';\n}\nfunction notEmptyArray(list, errorMsg) {\n    if (!list)\n        throw errorMsg ? errorMsg : 'ERROR_NULL_REQUIRED_ARRAY';\n    if (list.length < 1)\n        throw errorMsg ? errorMsg : 'ERROR_EMPTY_REQUIRED_ARRAY';\n}\nfunction emptyArray(list, errorMsg) {\n    if (list && list.length > 0)\n        throw errorMsg ? errorMsg : 'ERROR_ARRAY_MUST_BE_EMPTY';\n}\nexport { ok, notOk, equal, deepEqual, notEqual, notDeepEqual, throws, contains, containsFind, containsNTimes, notContains, notContainsFind, notEmptyString, notEmptyArray, emptyArray };\n//# sourceMappingURL=index.js.map"]}